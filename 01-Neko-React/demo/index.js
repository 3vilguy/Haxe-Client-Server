// Generated by Haxe 3.4.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.main = function() {
	ReactDOM.render({ "$$typeof" : $$tre, type : view_MainView, props : { }},window.document.getElementById("app"));
};
var view_ChatView = function(props) {
	React.Component.call(this,props);
};
view_ChatView.__super__ = React.Component;
view_ChatView.prototype = $extend(React.Component.prototype,{
	render: function() {
		var tmp = $$tre;
		var tmp1 = this.createChatMessages();
		return { $$typeof : tmp, type : "div", props : { style : { margin : "5px 5px 0", display : "flex", flexDirection : "column", padding : 5, flexGrow : 1, backgroundColor : "#CCCCCC", justifyContent : "flex-end"}, children : [tmp1,{ "$$typeof" : $$tre, type : "div", props : { }}]}};
	}
	,createChatMessages: function() {
		if(this.props.messages.length > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.props.messages;
			while(_g1 < _g2.length) {
				var msg = _g2[_g1];
				++_g1;
				_g.push({ "$$typeof" : $$tre, type : "div", props : { children : [msg,{ "$$typeof" : $$tre, type : "div", props : { }}]}});
			}
			return _g;
		}
		return null;
	}
});
var view_LoginView = function(props) {
	React.Component.call(this,props);
	this.state = { btnEnabled : true};
};
view_LoginView.__super__ = React.Component;
view_LoginView.prototype = $extend(React.Component.prototype,{
	render: function() {
		var tmp = $$tre;
		var tmp1 = $$tre;
		var tmp2 = { "$$typeof" : $$tre, type : "div", props : { children : "Server IP:"}};
		var tmp3 = $$tre;
		var tmp4 = React.createElement("input",{ ref : "address", defaultValue : view_LoginView.HOST_DEFAULT});
		var tmp5 = $$tre;
		var tmp6 = { "$$typeof" : $$tre, type : "div", props : { children : "Name:"}};
		var tmp7 = $$tre;
		var tmp8 = React.createElement("input",{ ref : "name", defaultValue : new Date().getTime()});
		var tmp9 = $$tre;
		var tmp10 = $$tre;
		return { $$typeof : tmp, type : "div", props : { style : { height : "100vh", display : "flex", flexDirection : "column", justifyContent : "center", alignItems : "center"}, children : [{ $$typeof : tmp1, type : "div", props : { style : { marginBottom : 10}, children : [tmp2,{ $$typeof : tmp3, type : "div", props : { children : tmp4}}]}},{ $$typeof : tmp5, type : "div", props : { style : { marginBottom : 20}, children : [tmp6,{ $$typeof : tmp7, type : "div", props : { children : tmp8}}]}},{ $$typeof : tmp9, type : "div", props : { children : { $$typeof : tmp10, type : "button", props : { disabled : !this.state.btnEnabled, onClick : $bind(this,this.handleOnClick), children : { "$$typeof" : $$tre, type : "b", props : { children : "Connect!"}}}}}}]}};
	}
	,handleOnClick: function() {
		this.setState({ btnEnabled : false});
		this.props.connectHandler(this.refs.address.value,this.refs.name.value);
	}
});
var view_MainView = function(props) {
	React.Component.call(this,props);
	this.state = { isConnected : false, name : "", messages : []};
};
view_MainView.__super__ = React.Component;
view_MainView.prototype = $extend(React.Component.prototype,{
	render: function() {
		if(this.state.isConnected == false) {
			return { "$$typeof" : $$tre, type : view_LoginView, props : { connectHandler : $bind(this,this.connectToServer)}};
		} else {
			var tmp = $$tre;
			var tmp1 = { "$$typeof" : $$tre, type : view_ChatView, props : { messages : this.state.messages}};
			var tmp2 = $$tre;
			var tmp3 = React.createElement("input",{ ref : "input", style : { flexGrow : 2}, placeholder : "Type text here", onKeyPress : $bind(this,this.onKeyPress)});
			return { $$typeof : tmp, type : "div", props : { style : { height : "100vh", display : "flex", flexDirection : "column", justifyContent : "flex-end", backgroundColor : "#DDDDDD"}, children : [tmp1,{ $$typeof : tmp2, type : "div", props : { style : { padding : 5, display : "flex"}, children : [tmp3,{ "$$typeof" : $$tre, type : "button", props : { onClick : $bind(this,this.sendTextFromInputField), children : "Send"}}]}}]}};
		}
	}
	,connectToServer: function(host,name) {
		var _gthis = this;
		this._ws = new WebSocket("ws://" + host + ":" + view_MainView.PORT);
		this._ws.onopen = function() {
			console.log("CONNECT");
			_gthis.setState({ isConnected : true, name : name});
			_gthis.sayHi(name);
		};
		this._ws.onmessage = function(e) {
			console.log("RECEIVE: " + e.data);
			var messages = _gthis.state.messages;
			messages.push(e.data);
			_gthis.setState({ messages : messages});
		};
		this._ws.onclose = function() {
			console.log("DISCONNECT");
		};
	}
	,sayHi: function(name) {
		var introMsg = { type : 0, name : name};
		this.sendMessage(JSON.stringify(introMsg));
	}
	,onKeyPress: function(e) {
		if(e.key == "Enter") {
			this.sendTextFromInputField();
		}
	}
	,sendTextFromInputField: function() {
		var text = this.refs.input.value;
		if(text.length > 0) {
			console.log("Text => " + text);
			var txtMsg = { type : 1, text : text};
			this.sendMessage(JSON.stringify(txtMsg));
			this.refs.input.value = "";
		}
	}
	,sendMessage: function(msg) {
		console.log("Sending => " + msg);
		this._ws.send(msg);
	}
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var $$tre = (typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")) || 0xeac7;
view_ChatView.displayName = "ChatView";
view_LoginView.HOST_DEFAULT = "127.0.0.1";
view_LoginView.displayName = "LoginView";
view_MainView.PORT = 1234;
view_MainView.displayName = "MainView";
Main.main();
})();
